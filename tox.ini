; By default, testenvs are configured to:
; - don't skip dist (skipsdist = False)
; - don't skip the package installation (skip_install = False)
; - don't use source installation (usedevelop = False)
; where one of those steps is not necessary for the test,
; we set the associated flag (e.g. for linting we don't need
; the package installation).
[tox]
envlist = bandit, safety, black, black-check, isort, isort-check, check-copyright, check-hash, check-packages, check-pipfiles, check-api-docs, docs, check-doc-links-hashes, flake8, mypy, pylint, darglint, vulture, check-generate-all-protocols, generate-all-protocols, check-abciapp-specs, check-abci-docstrings, check-handlers, py{3.7,3.8,3.9,3.10}-{win,linux,darwin}
; when running locally we don't want to fail for no good reason
skip_missing_interpreters = true

[deps-framework]
deps =
    Werkzeug==2.0.3

[deps-tests]
deps =
    {[deps-framework]deps}
    tomte[tests]==0.2.2
    mistune==2.0.3

[deps-packages]
deps =
    {[deps-tests]deps}
    aiohttp==3.7.4.post0
    typing_extensions==3.10.0.2

[deps-base]
deps ={[deps-packages]deps}

[testenv-multi-ubuntu]
deps =
    {[deps-base]deps}

[testenv-multi-win]
deps =
    {[deps-base]deps}

[testenv-multi-darwin]
deps = {[deps-base]deps}

[testenv]
basepython = python3
whitelist_externals = /bin/sh
deps =
    {[deps-base]deps}
passenv = *
extras = all
setenv =
    PYTHONHASHSEED=0
    PYTHONPATH={env:PWD:%CD%}
    AUTONOMY_IMAGE_VERSION=latest



[testenv:bandit]
skipsdist = True
skip_install = True
deps =
    tomte[bandit]==0.2.2
commands =
    bandit -r open_autonomy_client -x */tests/*

[testenv:black]
skipsdist = True
skip_install = True
deps =
    tomte[black]==0.2.2
commands =
    black open_autonomy_client tests

[testenv:black-check]
skipsdist = True
skip_install = True
deps =
    tomte[black]==0.2.2
commands =
    black --check open_autonomy_client tests

[testenv:isort]
skipsdist = True
skip_install = True
deps =
    tomte[isort]==0.2.2
commands =
    isort open_autonomy_client/  tests/

[testenv:isort-check]
skipsdist = True
skip_install = True
deps =
    tomte[isort]==0.2.2
commands =
    isort --check-only --gitignore open_autonomy_client  tests/

[testenv:check-copyright]
skipsdist = True
skip_install = True
deps =
commands =
    {toxinidir}/scripts/check_copyright.py --check

[testenv:fix-copyright]
skipsdist = True
skip_install = True
deps =
commands =
    {toxinidir}/scripts/check_copyright.py




[testenv:docs]
skipsdist = True
skip_install = True
deps =
    tomte[docs]==0.2.2
commands =
    mkdocs build --clean --strict

[testenv:docs-serve]
skipsdist = True
skip_install = True
deps =
    tomte[docs]==0.2.2
commands = 
    mkdocs build --clean --strict
    python -c 'print("###### Starting local server. Press Control+C to stop server ######")'
    mkdocs serve -a localhost:8080

[testenv:flake8]
skipsdist = True
skip_install = True
deps =
    tomte[flake8]==0.2.2
commands =
    flake8 open_autonomy_client  tests

[testenv:mypy]
skipsdist = True
skip_install = True
deps =
    tomte[mypy]==0.2.2
commands =
    mypy open_autonomy_client  tests --disallow-untyped-defs

[testenv:pylint]
whitelist_externals = /bin/sh
skipsdist = True
deps =
    {[deps-packages]deps}
    tomte[pylint]==0.2.2
commands =
    pylint --rcfile=setup.cfg open_autonomy_client  tests -j 0
    # -j0 to utilize all cpu cores

[testenv:safety]
skipsdist = True
skip_install = True
deps =
    tomte[safety]==0.2.2
commands =
    safety check -i 37524 -i 38038 -i 37776 -i 38039 -i 39621 -i 40291 -i 39706 -i 41002 -i 51358 -i 51499

[testenv:vulture]
skipsdist = True
skip_install = True
deps =
    tomte[vulture]==0.2.2
commands =
    vulture open_autonomy_client

[testenv:darglint]
skipsdist = True
skip_install = True
deps =
    tomte[darglint]==0.2.2
commands = 
    darglint open_autonomy_client



