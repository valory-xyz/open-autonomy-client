; By default, testenvs are configured to:
; - don't skip dist (skipsdist = False)
; - don't skip the package installation (skip_install = False)
; - don't use source installation (usedevelop = False)
; where one of those steps is not necessary for the test,
; we set the associated flag (e.g. for linting we don't need
; the package installation).
[tox]
envlist = bandit, safety, black, black-check, isort, isort-check, check-copyright, docs, flake8, mypy, pylint, darglint, vulture, generate-all-protocols, py{3.10}-{win,linux,darwin}
; when running locally we don't want to fail for no good reason
skip_missing_interpreters = true
isolated_build = True

[deps-tests]
deps = tomte[tests]==0.2.2

[deps-packages]
deps =
    {[deps-tests]deps}
    aiohttp==3.7.4.post0

[deps-base]
deps = {[deps-packages]deps}

[testenv]
basepython = python3
whitelist_externals = /bin/sh
deps = {[deps-base]deps}
extras = all

[commands-cov]
commands = pytest -rfE tests --cov=open_autonomy_client --cov-report=xml --cov-report=term --cov-report=term-missing --cov-config=.coveragerc {posargs}

[testenv:py3.10-linux]
basepython = python3.10
platform=^linux$
deps = {[deps-base]deps}
commands = {[commands-cov]commands}

[testenv:py3.10-win]
basepython = python3.10
platform=^win32$
deps = {[deps-base]deps}
commands = {[commands-cov]commands}

[testenv:py3.10-darwin]
basepython = python3.10
platform=^darwin$
deps = {[deps-base]deps}
commands = {[commands-cov]commands}

[testenv:bandit]
skipsdist = True
skip_install = True
deps = tomte[bandit]==0.2.2
commands = bandit -r open_autonomy_client -x */tests/*

[testenv:black]
skipsdist = True
skip_install = True
deps = tomte[black]==0.2.2
commands = black open_autonomy_client tests

[testenv:black-check]
skipsdist = True
skip_install = True
deps = tomte[black]==0.2.2
commands = black --check open_autonomy_client tests

[testenv:isort]
skipsdist = True
skip_install = True
deps = tomte[isort]==0.2.2
commands = isort open_autonomy_client/  tests/

[testenv:isort-check]
skipsdist = True
skip_install = True
deps = tomte[isort]==0.2.2
commands = isort --check-only --gitignore open_autonomy_client tests/

[testenv:check-copyright]
skipsdist = True
skip_install = True
deps =
commands = {toxinidir}/scripts/check_copyright.py --check

[testenv:fix-copyright]
skipsdist = True
skip_install = True
deps =
commands = {toxinidir}/scripts/check_copyright.py

[flake8]
# ignore as too restrictive for our needs:
# D400: First line should end with a period
# D401: First line should be in imperative mood
# E501: https://www.flake8rules.com/rules/E501.html (Line too long)
# E203: https://www.flake8rules.com/rules/E203.html (Whitespace)
# W503: https://www.flake8rules.com/rules/W503.html (Line break)
# D202: blank lines
# B014: redundant exception
extend-ignore = E203,E501,W503,D202,B014,D400,D401,DAR,B028,B017

[testenv:flake8]
skipsdist = True
skip_install = True
deps = tomte[flake8]==0.2.2
commands = flake8 open_autonomy_client tests

[testenv:mypy]
skipsdist = True
skip_install = True
deps = tomte[mypy]==0.2.2
commands = mypy open_autonomy_client  tests --disallow-untyped-defs

[testenv:pylint]
whitelist_externals = /bin/sh
skipsdist = True
deps =
    {[deps-packages]deps}
    tomte[pylint]==0.2.2
commands =
    pylint open_autonomy_client tests -j 0
    # -j0 to utilize all cpu cores

[testenv:safety]
skipsdist = True
skip_install = True
deps = tomte[safety]==0.2.2
commands = safety check -i 37524 -i 38038 -i 37776 -i 38039 -i 39621 -i 40291 -i 39706 -i 41002 -i 51358 -i 51499

[testenv:vulture]
skipsdist = True
skip_install = True
deps = tomte[vulture]==0.2.2
commands = vulture open_autonomy_client

[testenv:darglint]
skipsdist = True
skip_install = True
deps = tomte[darglint]==0.2.2
commands = darglint open_autonomy_client -s sphinx
